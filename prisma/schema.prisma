// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employee {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  salary    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  attendances      Attendance[]
  overtimes        Overtime[]
  reimbursements   Reimbursement[]
  payslips         Payslip[]
}

model Admin {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PayrollPeriod {
  id        Int      @id @default(autoincrement())
  startDate DateTime
  endDate   DateTime
  status    String   @default("open")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  payslips  Payslip[]
}

model Attendance {
  id         Int      @id @default(autoincrement())
  employeeId Int
  date       DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  employee   Employee @relation(fields: [employeeId], references: [id])
}

model Overtime {
  id         Int      @id @default(autoincrement())
  employeeId Int
  date       DateTime
  hours      Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  employee   Employee @relation(fields: [employeeId], references: [id])
}

model Reimbursement {
  id          Int      @id @default(autoincrement())
  employeeId  Int
  amount      Float
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  employee    Employee @relation(fields: [employeeId], references: [id])
}

model Payslip {
  id                 Int      @id @default(autoincrement())
  employeeId         Int
  payrollPeriodId    Int
  attendanceDays     Int
  overtimeHours      Float
  reimbursementTotal Float
  takeHomePay        Float
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  employee        Employee      @relation(fields: [employeeId], references: [id])
  payrollPeriod   PayrollPeriod @relation(fields: [payrollPeriodId], references: [id])
}