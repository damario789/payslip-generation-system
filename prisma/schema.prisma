generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employee {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  password     String
  salary       Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdById  Int?     // Admin who created the employee
  updatedById  Int?     // ID of Admin or Employee who updated
  updatedByType String? // "Admin" or "Employee"

  // Relations
  attendances          Attendance[]      @relation("EmployeeAttendances")
  overtimes            Overtime[]        @relation("EmployeeOvertimes")
  reimbursements       Reimbursement[]   @relation("EmployeeReimbursements")
  payslips             Payslip[]         @relation("EmployeePayslips")
  createdBy            Admin?            @relation("CreatedByEmployee", fields: [createdById], references: [id])
}

model Admin {
  id          Int      @id @default(autoincrement())
  username    String   @unique
  password    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById Int?
  updatedById Int?

  // Relations
  createdPayrollPeriods PayrollPeriod[] @relation("CreatedByPayrollPeriod")
  updatedPayrollPeriods PayrollPeriod[] @relation("UpdatedByPayrollPeriod")
  createdPayslips       Payslip[]       @relation("CreatedByPayslip")
  updatedPayslips       Payslip[]       @relation("UpdatedByPayslip")
  createdEmployees      Employee[]      @relation("CreatedByEmployee")
  createdAdmins         Admin[]         @relation("CreatedByAdmin")
  updatedAdmins         Admin[]         @relation("UpdatedByAdmin")
  createdBy             Admin?          @relation("CreatedByAdmin", fields: [createdById], references: [id])
  updatedBy             Admin?          @relation("UpdatedByAdmin", fields: [updatedById], references: [id])
}

model PayrollPeriod {
  id          Int      @id @default(autoincrement())
  startDate   DateTime
  endDate     DateTime
  status      String   @default("open")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById Int
  updatedById Int

  // Relations
  payslips    Payslip[]       @relation("PayrollPeriodPayslips")
  createdBy   Admin           @relation("CreatedByPayrollPeriod", fields: [createdById], references: [id])
  updatedBy   Admin           @relation("UpdatedByPayrollPeriod", fields: [updatedById], references: [id])
}

model Attendance {
  id            Int      @id @default(autoincrement())
  employeeId    Int
  date          DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdById   Int
  createdByType String   // "Admin" or "Employee"
  updatedById   Int
  updatedByType String   // "Admin" or "Employee"

  // Relations
  employee      Employee @relation("EmployeeAttendances", fields: [employeeId], references: [id])
}

model Overtime {
  id            Int      @id @default(autoincrement())
  employeeId    Int
  date          DateTime
  hours         Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdById   Int
  createdByType String   // "Admin" or "Employee"
  updatedById   Int
  updatedByType String   // "Admin" or "Employee"

  // Relations
  employee      Employee @relation("EmployeeOvertimes", fields: [employeeId], references: [id])
}

model Reimbursement {
  id            Int      @id @default(autoincrement())
  employeeId    Int
  amount        Float
  description   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdById   Int
  createdByType String   // "Admin" or "Employee"
  updatedById   Int
  updatedByType String   // "Admin" or "Employee"

  // Relations
  employee      Employee @relation("EmployeeReimbursements", fields: [employeeId], references: [id])
}

model Payslip {
  id                 Int      @id @default(autoincrement())
  employeeId         Int
  payrollPeriodId    Int
  attendanceDays     Int
  overtimeHours      Float
  reimbursementTotal Float
  takeHomePay        Float
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  createdById        Int
  updatedById        Int

  // Relations
  employee           Employee      @relation("EmployeePayslips", fields: [employeeId], references: [id])
  payrollPeriod      PayrollPeriod @relation("PayrollPeriodPayslips", fields: [payrollPeriodId], references: [id])
  createdBy          Admin         @relation("CreatedByPayslip", fields: [createdById], references: [id])
  updatedBy          Admin         @relation("UpdatedByPayslip", fields: [updatedById], references: [id])
}

model AuditLog {
  id          Int      @id @default(autoincrement())
  action      String   // e.g., "UPDATE_ATTENDANCE"
  entityId    Int      // ID of the affected record
  entityType  String   // e.g., "Attendance"
  userId      Int      // ID of the user
  userType    String   // "Employee" or "Admin"
  requestId   String
  ipAddress   String
  createdAt   DateTime @default(now())
}